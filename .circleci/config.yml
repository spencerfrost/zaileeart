version: 2.1

jobs:
  build:
    docker:
      - image: cimg/node:lts
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          name: Restore pnpm Package Cache
          keys:
            - pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
      - run:
          name: Install pnpm package manager
          command: |
            sudo corepack enable
            corepack prepare pnpm@latest-9 --activate
            pnpm config set store-dir .pnpm-store
      - run:
          name: Install Dependencies
          command: |
            pnpm install
      - run:
          name: Build Frontend
          command: pnpm run build:frontend
      - run:
          name: Build Backend
          command: pnpm run build:backend
      - save_cache:
          name: Save pnpm Package Cache
          key: pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - .pnpm-store
      - persist_to_workspace:
          root: .
          paths:
            - apps/frontend/.output
            - apps/backend/dist
            - apps/backend/package.json
            - pnpm-lock.yaml

  deploy:
    machine:
      image: ubuntu-2204:current
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - add_ssh_keys:
          fingerprints:
            - "SHA256:6+qHFQDbqCYFzFzHfY7fpBaly2rEB83DUxswOGj6dkI"
      - run:
          name: Deploy to Server
          command: |
            scp -vr /home/circleci/project/apps/frontend/.output/* $SERVER_USER@$SERVER_IP:$SERVER_DIR/frontend
            scp -vr /home/circleci/project/apps/backend/dist/* /home/circleci/project/apps/backend/package.json /home/circleci/project/pnpm-lock.yaml $SERVER_USER@$SERVER_IP:$SERVER_DIR/backend
            ssh $SERVER_USER@$SERVER_IP "cd $SERVER_DIR/backend && pnpm install --production && pm2 restart $SERVER_DIR/backend/ecosystem.config.js && sudo systemctl restart nginx"

workflows:
  build-and-deploy:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master